#!/usr/bin/env cwl-runner
# This tool description was generated automatically by wdl2cwl ver. 0.2

{
    "inputs": [
        {
            "id": "gatk",
            "type": "File",
            "doc": "Executable jar for the GenomeAnalysisTK"
        },
        {
            "id": "ref",
            "type": "File",
            "doc": "fasta file of reference genome"
        },
        {
            "id": "refIndex",
            "type": "File",
            "doc": "Index file of reference genome"
        },
        {
            "id": "refDict",
            "type": "File",
            "doc": "dict file of reference genome"
        },
        {
            "id": "userString",
            "type": "string?",
            "doc": "An optional parameter which allows the user to specify additions to the command line at run time"
        },
        {
            "id": "intervals",
            "type": "string[]?",
            "doc": "One or more genomic intervals over which to operate"
        },
        {
            "id": "ntVal",
            "type": "int?"
        },
        {
            "id": "aggregate",
            "type": "string[]?",
            "doc": "Additional raw input variants to be used in building the model"
        },
        {
            "id": "badLodCutoff",
            "type": "float?",
            "doc": "LOD score cutoff for selecting bad variants"
        },
        {
            "id": "dirichlet",
            "type": "float?",
            "doc": "The dirichlet parameter in the variational Bayes algorithm."
        },
        {
            "id": "ignore_all_filters",
            "type": "boolean?",
            "doc": "If specified, the variant recalibrator will ignore all input filters. Useful to rerun the VQSR from a filtered output file."
        },
        {
            "id": "ignore_filter",
            "type": "string[]?",
            "doc": "If specified, the variant recalibrator will also use variants marked as filtered by the specified filter name in the input VCF file"
        },
        {
            "id": "task_input",
            "type": "string[]",
            "doc": "One or more VCFs of raw input variants to be recalibrated"
        },
        {
            "id": "max_attempts",
            "type": "int?",
            "doc": "Number of attempts to build a model before failing"
        },
        {
            "id": "maxGaussians",
            "type": "int?",
            "doc": "Max number of Gaussians for the positive model"
        },
        {
            "id": "maxIterations",
            "type": "int?",
            "doc": "Maximum number of VBEM iterations"
        },
        {
            "id": "maxNegativeGaussians",
            "type": "int?",
            "doc": "Max number of Gaussians for the negative model"
        },
        {
            "id": "maxNumTrainingData",
            "type": "int?",
            "doc": "Maximum number of training data"
        },
        {
            "id": "minNumBadVariants",
            "type": "int?",
            "doc": "Minimum number of bad variants"
        },
        {
            "id": "mode",
            "type": "string",
            "doc": "Recalibration mode to employ"
        },
        {
            "id": "model_file",
            "type": "string?",
            "doc": "A GATKReport containing the positive and negative model fits"
        },
        {
            "id": "MQCapForLogitJitterTransform",
            "type": "int?",
            "doc": "Apply logit transform and jitter to MQ values"
        },
        {
            "id": "numKMeans",
            "type": "int?",
            "doc": "Number of k-means iterations"
        },
        {
            "id": "output_model",
            "type": "boolean?",
            "doc": "If specified, the variant recalibrator will output the VQSR model fit to the file specified by -modelFile or to stdout"
        },
        {
            "id": "priorCounts",
            "type": "float?",
            "doc": "The number of prior counts to use in the variational Bayes algorithm."
        },
        {
            "id": "recal_file",
            "type": "string",
            "doc": "The output recal file used by ApplyRecalibration"
        },
        {
            "id": "resource",
            "type": "string[]",
            "doc": "A list of sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run)"
        },
        {
            "id": "rscript_file",
            "type": "File?",
            "doc": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model"
        },
        {
            "id": "shrinkage",
            "type": "float?",
            "doc": "The shrinkage parameter in the variational Bayes algorithm."
        },
        {
            "id": "stdThreshold",
            "type": "float?",
            "doc": "Annotation value divergence threshold (number of standard deviations from the means) "
        },
        {
            "id": "target_titv",
            "type": "float?",
            "doc": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!"
        },
        {
            "id": "tranches_file",
            "type": "File",
            "doc": "The output tranches file used by ApplyRecalibration"
        },
        {
            "id": "trustAllPolymorphic",
            "type": "boolean?",
            "doc": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation."
        },
        {
            "id": "TStranche",
            "type": "float[]?",
            "doc": "The levels of truth sensitivity at which to slice the data. (in percent, that is 1.0 for 1 percent)"
        },
        {
            "id": "use_annotation",
            "type": "string[]",
            "doc": "The names of the annotations which should used for calculations"
        },
        {
            "id": "useAlleleSpecificAnnotations",
            "type": "boolean?",
            "doc": "If specified, the variant recalibrator will attempt to use the allele-specific versions of the specified annotations."
        }
    ],
    "id": "VariantRecalibrator",
    "baseCommand": [],
    "class": "CommandLineTool",
    "requirements": [
        {
            "class": "ShellCommandRequirement"
        },
        {
            "class": "InlineJavascriptRequirement"
        },
        {
            "dockerPull": "broadinstitute/genomes-in-the-cloud:2.2.2-1466113830",
            "class": "DockerRequirement"
        }
    ],
    "outputs": [
        {
            "id": "taskOut",
            "outputBinding": {
                "glob": "$(inputs.out)"
            },
            "type": "string"
        }
    ],
    "arguments": [
        {
            "valueFrom": "\t\tjava -jar $(inputs.gatk.path) \\\t\t\t-T VariantRecalibrator \\\t\t\t-R $(inputs.ref.path) \\\t\t\t$(\"--intervals \" + inputs.intervals) \\\t\t\t$(\"-nt\" + inputs.ntVal) \\\t\t\t$(\"-aggregate \" + inputs.aggregate) \\\t\t\t-badLodCutoff $(inputs.badLodCutoff) \\\t\t\t-dirichlet $(inputs.dirichlet) \\\t\t\t-ignoreAllFilters $(inputs.ignore_all_filters) \\\t\t\t-ignoreFilter $(inputs.ignore_filter) \\\t\t\t-input $(inputs.task_input) \\\t\t\t-max_attempts $(inputs.max_attempts) \\\t\t\t-mG $(inputs.maxGaussians) \\\t\t\t-mI $(inputs.maxIterations) \\\t\t\t-mNG $(inputs.maxNegativeGaussians) \\\t\t\t-maxNumTrainingData $(inputs.maxNumTrainingData) \\\t\t\t-minNumBad $(inputs.minNumBadVariants) \\\t\t\t-mode $(inputs.mode) \\\t\t\t-modelFile $(inputs.model_file) \\\t\t\t-MQCap $(inputs.MQCapForLogitJitterTransform) \\\t\t\t-nKM $(inputs.numKMeans) \\\t\t\t-outputModel $(inputs.output_model) \\\t\t\t-priorCounts $(inputs.priorCounts) \\\t\t\t-recalFile $(inputs.recal_file) \\\t\t\t-resource $(inputs.resource) \\\t\t\t$(\"-rscriptFile \" + inputs.rscript_file) \\\t\t\t-shrinkage $(inputs.shrinkage) \\\t\t\t-std $(inputs.stdThreshold) \\\t\t\t-titv $(inputs.target_titv) \\\t\t\t-tranchesFile $(inputs.tranches_file.path) \\\t\t\t-allPoly $(inputs.trustAllPolymorphic) \\\t\t\t-tranche $(inputs.TStranche) \\\t\t\t-an $(inputs.use_annotation) \\\t\t\t-AS $(inputs.useAlleleSpecificAnnotations) \\\t\t\t$(inputs.userString) \t",
            "shellQuote": false
        }
    ],
    "cwlVersion": "v1.0"
}